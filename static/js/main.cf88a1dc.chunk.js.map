{"version":3,"sources":["mirrorIcon.jpeg","components/NavBar.js","components/Camera.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","Brand","href","src","navLogo","width","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Camera","videoPlayer","useRef","canvas","photoTaken","useEffect","a","console","error","navigator","mediaDevices","enumerateDevices","cameras","processDevices","getCamera","useCallback","devices","forEach","device","label","setDevice","deviceId","getUserMedia","audio","video","then","stream","current","srcObject","catch","err","play","turnCameraOn","Button","onClick","getVideoTracks","track","stop","setTimeout","getContext","drawImage","ref","download","document","getElementById","toBlob","blob","URL","createObjectURL","alert","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cf88a1dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mirrorIcon.e8201d43.jpeg\";","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport navLogo from '../mirrorIcon.jpeg';\n\nconst NavBar = () => (\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">\n      <img\n        src={navLogo}\n        width=\"30\"\n        height=\"30\"\n        className=\"d-inline-block align-top\"\n        alt=\"Mirror logo\"\n      />\n    </Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n    Mirror App: Smile for the Camera!\n    </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n);\n\nexport default NavBar;\n","import React, { useEffect, useRef, useCallback } from 'react';\nimport { Button } from 'react-bootstrap';\n\nconst Camera = () => {\n  const videoPlayer = useRef(null);\n  const canvas = useRef(null);\n  var photoTaken = false;\n\n  useEffect(() => {\n    async function getCamera() {\n      console.error('enumerate devices:', navigator.mediaDevices.enumerateDevices());\n      const cameras = await navigator.mediaDevices.enumerateDevices();\n      processDevices(cameras);\n    }\n    getCamera();\n  }, []);\n\n  const processDevices = useCallback((devices) => {\n    devices.forEach((device) => {\n      console.error('Device:', device.label);\n      setDevice(device);\n    });\n  });\n\n  const setDevice = async (device) => {\n    const { deviceId } = device;\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: { deviceId } })\n      .then((stream) => videoPlayer.current.srcObject = stream)\n      .catch((err) => console.error(err));\n    videoPlayer.current.play();\n  };\n\n  const turnCameraOff = () => {\n    videoPlayer.current.srcObject.getVideoTracks().forEach((track) => track.stop());\n  };\n\n  const turnCameraOn = async () => {\n    const cameras = await navigator.mediaDevices.enumerateDevices();\n    processDevices(cameras);\n  };\n\n  const takePhoto = () => {\n      setTimeout(() => {\n      const context = canvas.current.getContext('2d');\n      context.drawImage(videoPlayer.current, 0, 0, canvas.current.width, canvas.current.height);\n  }, 4000);\n     photoTaken = true;\n  };\n\n  const downloadPhoto = () => {\n    if (photoTaken == true){\n    const myCanvas = document.getElementById('my-canvas');\n    myCanvas.toBlob(\n        blob => {\n          const anchor = document.getElementById('download-link');\n          anchor.href = URL.createObjectURL(blob);\n        },\n        'image/jpeg',\n        0.9,\n      );\n    }\n    else {alert(\"no photo to download!\")}\n  }\n\n  return (\n    <div className=\"video_booth\">\n      <h2 id=\"camHeader\">Photo Booth! Say Cheese!</h2>\n      <Button className='mr-2' onClick={() => turnCameraOff()}>Turn off Camera</Button>\n      <Button className='mr-2' onClick={() => turnCameraOn()}>Turn on Camera</Button>\n      <Button onClick={() => takePhoto()}>Take photo! (4s delay)</Button>\n      <div className=\"video_booth__viewer\">\n        <video ref={videoPlayer} width=\"680\" height=\"500\" />\n      </div>\n      <div className=\"video_booth__stage mt-2\">\n        <canvas id=\"my-canvas\" className='canvas' width=\"680\" height=\"500\" ref={canvas} />\n      </div>\n       <a id=\"download-link\" download=\"photobooth_pic.jpg\"><Button onClick={() => downloadPhoto()}>Download Photo</Button></a>\n    </div>\n  );\n};\n\nexport default Camera;\n","import React from 'react';\nimport './App.css';\nimport NavBar from '../components/NavBar';\nimport Camera from '../components/Camera';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar></NavBar>\n        <Camera></Camera>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}